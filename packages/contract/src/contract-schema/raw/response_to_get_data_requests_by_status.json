{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "GetDataRequestsByStatusResponse",
	"type": "object",
	"required": ["data_requests", "is_paused"],
	"properties": {
		"data_requests": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/DataRequest"
			}
		},
		"is_paused": {
			"type": "boolean"
		}
	},
	"additionalProperties": false,
	"definitions": {
		"Binary": {
			"description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
			"type": "string"
		},
		"DataRequest": {
			"description": "Represents a data request at creation time",
			"type": "object",
			"required": [
				"commits",
				"consensus_filter",
				"exec_gas_limit",
				"exec_inputs",
				"exec_program_id",
				"gas_price",
				"height",
				"id",
				"memo",
				"payback_address",
				"replication_factor",
				"reveals",
				"seda_payload",
				"tally_gas_limit",
				"tally_inputs",
				"tally_program_id",
				"version"
			],
			"properties": {
				"commits": {
					"description": "Commitments submitted by executors",
					"type": "object",
					"additionalProperties": false
				},
				"consensus_filter": {
					"description": "Filter applied before tally execution",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"exec_gas_limit": {
					"description": "The limit to how much gas should be used for executing the DR",
					"type": "integer",
					"format": "uint64",
					"minimum": 0.0
				},
				"exec_inputs": {
					"description": "Inputs for DR WASM binary",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"exec_program_id": {
					"description": "Identifier of DR WASM binary",
					"type": "string"
				},
				"gas_price": {
					"description": "Amount of SEDA tokens per gas unit",
					"allOf": [
						{
							"$ref": "#/definitions/Uint128"
						}
					]
				},
				"height": {
					"description": "The height data request was posted. Used for commitment.",
					"type": "integer",
					"format": "uint64",
					"minimum": 0.0
				},
				"id": {
					"description": "Identifier",
					"type": "string"
				},
				"memo": {
					"description": "Public info attached to DR",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"payback_address": {
					"description": "Payback address set by the relayer",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"replication_factor": {
					"description": "Amount of required DR executors",
					"type": "integer",
					"format": "uint16",
					"minimum": 0.0
				},
				"reveals": {
					"description": "Reveals submitted by executors",
					"type": "object",
					"additionalProperties": false
				},
				"seda_payload": {
					"description": "Payload set by SEDA Protocol (e.g. OEV-enabled data requests)",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"tally_gas_limit": {
					"description": "The limit to how much gas should be used for tallying the DR",
					"type": "integer",
					"format": "uint64",
					"minimum": 0.0
				},
				"tally_inputs": {
					"description": "Inputs for Tally WASM binary",
					"allOf": [
						{
							"$ref": "#/definitions/Binary"
						}
					]
				},
				"tally_program_id": {
					"description": "Identifier of Tally WASM binary",
					"type": "string"
				},
				"version": {
					"description": "Semantic Version String",
					"type": "string",
					"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
				}
			},
			"additionalProperties": false
		},
		"RevealBody": {
			"description": "A revealed data request result that is hashed and signed by the executor",
			"type": "object",
			"required": ["exit_code", "gas_used", "id", "proxy_public_keys", "reveal", "salt"],
			"properties": {
				"exit_code": {
					"type": "integer",
					"format": "uint8",
					"minimum": 0.0
				},
				"gas_used": {
					"type": "integer",
					"format": "uint64",
					"minimum": 0.0
				},
				"id": {
					"type": "string"
				},
				"proxy_public_keys": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"reveal": {
					"$ref": "#/definitions/Binary"
				},
				"salt": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"Uint128": {
			"description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
			"type": "string"
		}
	}
}
