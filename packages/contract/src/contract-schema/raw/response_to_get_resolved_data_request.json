{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "DataResult",
	"description": "Represents a resolved data result",
	"type": "object",
	"required": [
		"block_height",
		"dr_id",
		"exit_code",
		"gas_used",
		"payback_address",
		"result",
		"seda_payload",
		"version"
	],
	"properties": {
		"block_height": {
			"description": "Block Height at which data request was finalized",
			"type": "integer",
			"format": "uint64",
			"minimum": 0.0
		},
		"dr_id": {
			"description": "Data Request Identifier",
			"type": "array",
			"items": {
				"type": "integer",
				"format": "uint8",
				"minimum": 0.0
			},
			"maxItems": 32,
			"minItems": 32
		},
		"exit_code": {
			"description": "Exit code of Tally WASM binary execution",
			"type": "integer",
			"format": "uint8",
			"minimum": 0.0
		},
		"gas_used": {
			"$ref": "#/definitions/Uint128"
		},
		"payback_address": {
			"description": "Payback address set by the relayer",
			"type": "array",
			"items": {
				"type": "integer",
				"format": "uint8",
				"minimum": 0.0
			}
		},
		"result": {
			"description": "Result from Tally WASM binary execution",
			"type": "array",
			"items": {
				"type": "integer",
				"format": "uint8",
				"minimum": 0.0
			}
		},
		"seda_payload": {
			"description": "Payload set by SEDA Protocol (e.g. OEV-enabled data requests)",
			"type": "array",
			"items": {
				"type": "integer",
				"format": "uint8",
				"minimum": 0.0
			}
		},
		"version": {
			"description": "Semantic Version String",
			"type": "string",
			"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
		}
	},
	"additionalProperties": false,
	"definitions": {
		"Uint128": {
			"description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
			"type": "string"
		}
	}
}
