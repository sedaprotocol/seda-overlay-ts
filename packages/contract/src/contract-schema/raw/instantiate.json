{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "InstantiateMsg",
	"type": "object",
	"required": ["chain_id", "owner", "token"],
	"properties": {
		"chain_id": {
			"type": "string"
		},
		"dr_config": {
			"anyOf": [
				{
					"$ref": "#/definitions/DrConfig"
				},
				{
					"type": "null"
				}
			]
		},
		"owner": {
			"type": "string"
		},
		"staking_config": {
			"anyOf": [
				{
					"$ref": "#/definitions/StakingConfig"
				},
				{
					"type": "null"
				}
			]
		},
		"token": {
			"type": "string"
		}
	},
	"additionalProperties": false,
	"definitions": {
		"DrConfig": {
			"description": "Governance-controlled timeout configuration parameters",
			"type": "object",
			"required": [
				"backup_delay_in_blocks",
				"commit_timeout_in_blocks",
				"consensus_filter_limit_in_bytes",
				"dr_reveal_size_limit_in_bytes",
				"exec_input_limit_in_bytes",
				"memo_limit_in_bytes",
				"payback_address_limit_in_bytes",
				"reveal_timeout_in_blocks",
				"seda_payload_limit_in_bytes",
				"tally_input_limit_in_bytes"
			],
			"properties": {
				"backup_delay_in_blocks": {
					"description": "This is the delay before the backup executors are allowed to start executing the data request.",
					"type": "integer",
					"format": "uint8",
					"minimum": 1.0
				},
				"commit_timeout_in_blocks": {
					"description": "Number of blocks after which a data request is timed out while waiting for commits.",
					"type": "integer",
					"format": "uint8",
					"minimum": 1.0
				},
				"consensus_filter_limit_in_bytes": {
					"description": "The maximum size of the consensus filter.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"dr_reveal_size_limit_in_bytes": {
					"description": "The maximum size of all the reveals in a data request.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"exec_input_limit_in_bytes": {
					"description": "The maximum size of the input for the execution program.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"memo_limit_in_bytes": {
					"description": "The maximum size of the memo.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"payback_address_limit_in_bytes": {
					"description": "The maximum size of the payback address.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"reveal_timeout_in_blocks": {
					"description": "Number of blocks after which a data request is timed out while waiting for reveals.",
					"type": "integer",
					"format": "uint8",
					"minimum": 1.0
				},
				"seda_payload_limit_in_bytes": {
					"description": "The maximum size of the SEDA payload.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				},
				"tally_input_limit_in_bytes": {
					"description": "The maximum size of the input for the tally program.",
					"type": "integer",
					"format": "uint16",
					"minimum": 1.0
				}
			},
			"additionalProperties": false
		},
		"StakingConfig": {
			"description": "Governance-controlled staking configuration parameters",
			"type": "object",
			"required": ["allowlist_enabled", "minimum_stake"],
			"properties": {
				"allowlist_enabled": {
					"description": "Whether the allowlist is enabled",
					"type": "boolean"
				},
				"minimum_stake": {
					"description": "Minimum amount of SEDA tokens required to register as a data request executor",
					"allOf": [
						{
							"$ref": "#/definitions/Uint128"
						}
					]
				}
			},
			"additionalProperties": false
		},
		"Uint128": {
			"description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
			"type": "string"
		}
	}
}
