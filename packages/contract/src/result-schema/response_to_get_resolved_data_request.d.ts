/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

/**
 * Represents a resolved data result
 */
export interface DataResult {
  /**
   * Block Height at which data request was finalized
   */
  block_height: number;
  /**
   * Data Request Identifier
   *
   * @minItems 32
   * @maxItems 32
   */
  dr_id: [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ];
  /**
   * Exit code of Tally WASM binary execution
   */
  exit_code: number;
  gas_used: Uint128;
  /**
   * Payback address set by the relayer
   */
  payback_address: number[];
  /**
   * Result from Tally WASM binary execution
   */
  result: number[];
  /**
   * Payload set by SEDA Protocol (e.g. OEV-enabled data requests)
   */
  seda_payload: number[];
  /**
   * Semantic Version String
   */
  version: string;
}
