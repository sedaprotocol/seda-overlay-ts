/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Nullable_DataRequestResponse = DataRequestResponse | null;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 */
export type Binary = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

/**
 * Represents a data request at creation time
 */
export interface DataRequestResponse {
  /**
   * Commitments submitted by executors
   */
  commits: {};
  /**
   * Filter applied before tally execution
   */
  consensus_filter: Binary;
  /**
   * The limit to how much gas should be used for executing the DR
   */
  exec_gas_limit: number;
  /**
   * Inputs for DR WASM binary
   */
  exec_inputs: Binary;
  /**
   * Identifier of DR WASM binary
   */
  exec_program_id: string;
  /**
   * Amount of SEDA tokens per gas unit
   */
  gas_price: Uint128;
  /**
   * The height data request was posted. Used for commitment.
   */
  height: number;
  /**
   * Identifier
   */
  id: string;
  /**
   * Public info attached to DR
   */
  memo: Binary;
  /**
   * Payback address set by the relayer
   */
  payback_address: Binary;
  /**
   * Amount of required DR executors
   */
  replication_factor: number;
  /**
   * Reveals submitted by executors
   */
  reveals: {};
  /**
   * Payload set by SEDA Protocol (e.g. OEV-enabled data requests)
   */
  seda_payload: Binary;
  /**
   * The limit to how much gas should be used for tallying the DR
   */
  tally_gas_limit: number;
  /**
   * Inputs for Tally WASM binary
   */
  tally_inputs: Binary;
  /**
   * Identifier of Tally WASM binary
   */
  tally_program_id: string;
  /**
   * Semantic Version String
   */
  version: string;
}
